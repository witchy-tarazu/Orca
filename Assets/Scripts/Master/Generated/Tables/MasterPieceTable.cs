// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using Orca;
using System.Collections.Generic;
using System;

namespace Orca.Tables
{
   public sealed partial class MasterPieceTable : TableBase<MasterPiece>, ITableUniqueValidate
   {
        public Func<MasterPiece, (int PieceId, int Grade)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<MasterPiece, (int PieceId, int Grade)> primaryIndexSelector;


        public MasterPieceTable(MasterPiece[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.PieceId, x.Grade);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public RangeView<MasterPiece> FindByPieceIdAndGrade((int PieceId, int Grade) key)
        {
            return FindManyCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int PieceId, int Grade)>.Default, key);
        }

        public RangeView<MasterPiece> FindClosestByPieceIdAndGrade((int PieceId, int Grade) key, bool selectLower = true)
        {
            return FindManyClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int PieceId, int Grade)>.Default, key, selectLower);
        }

        public RangeView<MasterPiece> FindRangeByPieceIdAndGrade((int PieceId, int Grade) min, (int PieceId, int Grade) max, bool ascendant = true)
        {
            return FindManyRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int PieceId, int Grade)>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR


#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(MasterPiece), typeof(MasterPieceTable), "piece",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(MasterPiece).GetProperty("PieceId")),
                    new MasterMemory.Meta.MetaProperty(typeof(MasterPiece).GetProperty("Grade")),
                    new MasterMemory.Meta.MetaProperty(typeof(MasterPiece).GetProperty("CardId")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MasterPiece).GetProperty("PieceId"),
                        typeof(MasterPiece).GetProperty("Grade"),
                    }, true, false, System.Collections.Generic.Comparer<(int PieceId, int Grade)>.Default),
                });
        }

#endif
    }
}