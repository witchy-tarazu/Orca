// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using Orca;
using System.Collections.Generic;
using System.Collections;
using System;
using UnityEngine;

namespace Orca.Tables
{
   public sealed partial class MasterCardDetailTable : TableBase<MasterCardDetail>, ITableUniqueValidate
   {
        public Func<MasterCardDetail, (int CardId, int DetailId)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<MasterCardDetail, (int CardId, int DetailId)> primaryIndexSelector;

        readonly MasterCardDetail[] secondaryIndex0;
        readonly Func<MasterCardDetail, int> secondaryIndex0Selector;

        public MasterCardDetailTable(MasterCardDetail[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.CardId, x.DetailId);
            this.secondaryIndex0Selector = x => x.CardId;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<MasterCardDetail> SortByCardId => new RangeView<MasterCardDetail>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        public MasterCardDetail FindByCardIdAndDetailId((int CardId, int DetailId) key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int CardId, int DetailId)>.Default, key, true);
        }
        
        public bool TryFindByCardIdAndDetailId((int CardId, int DetailId) key, out MasterCardDetail result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int CardId, int DetailId)>.Default, key, out result);
        }

        public MasterCardDetail FindClosestByCardIdAndDetailId((int CardId, int DetailId) key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int CardId, int DetailId)>.Default, key, selectLower);
        }

        public RangeView<MasterCardDetail> FindRangeByCardIdAndDetailId((int CardId, int DetailId) min, (int CardId, int DetailId) max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int CardId, int DetailId)>.Default, min, max, ascendant);
        }

        public RangeView<MasterCardDetail> FindByCardId(int key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key);
        }

        public RangeView<MasterCardDetail> FindClosestByCardId(int key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<MasterCardDetail> FindRangeByCardId(int min, int max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "(CardId, DetailId)", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(MasterCardDetail), typeof(MasterCardDetailTable), "card_detail",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(MasterCardDetail).GetProperty("CardId")),
                    new MasterMemory.Meta.MetaProperty(typeof(MasterCardDetail).GetProperty("DetailId")),
                    new MasterMemory.Meta.MetaProperty(typeof(MasterCardDetail).GetProperty("ExecuteFrame")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MasterCardDetail).GetProperty("CardId"),
                        typeof(MasterCardDetail).GetProperty("DetailId"),
                    }, true, true, System.Collections.Generic.Comparer<(int CardId, int DetailId)>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MasterCardDetail).GetProperty("CardId"),
                    }, false, false, System.Collections.Generic.Comparer<int>.Default),
                });
        }

#endif
    }
}