// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using Orca;
using System.Collections.Generic;
using System;

namespace Orca.Tables
{
   public sealed partial class MasterInfluenceRelationTable : TableBase<MasterInfluenceRelation>, ITableUniqueValidate
   {
        public Func<MasterInfluenceRelation, (int ParentId, int ChildId)> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<MasterInfluenceRelation, (int ParentId, int ChildId)> primaryIndexSelector;


        public MasterInfluenceRelationTable(MasterInfluenceRelation[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => (x.ParentId, x.ChildId);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public RangeView<MasterInfluenceRelation> FindByParentIdAndChildId((int ParentId, int ChildId) key)
        {
            return FindManyCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int ParentId, int ChildId)>.Default, key);
        }

        public RangeView<MasterInfluenceRelation> FindClosestByParentIdAndChildId((int ParentId, int ChildId) key, bool selectLower = true)
        {
            return FindManyClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int ParentId, int ChildId)>.Default, key, selectLower);
        }

        public RangeView<MasterInfluenceRelation> FindRangeByParentIdAndChildId((int ParentId, int ChildId) min, (int ParentId, int ChildId) max, bool ascendant = true)
        {
            return FindManyRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<(int ParentId, int ChildId)>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR


#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(MasterInfluenceRelation), typeof(MasterInfluenceRelationTable), "influence_relation",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(MasterInfluenceRelation).GetProperty("ParentId")),
                    new MasterMemory.Meta.MetaProperty(typeof(MasterInfluenceRelation).GetProperty("TriggerCondition")),
                    new MasterMemory.Meta.MetaProperty(typeof(MasterInfluenceRelation).GetProperty("ChildId")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(MasterInfluenceRelation).GetProperty("ParentId"),
                        typeof(MasterInfluenceRelation).GetProperty("ChildId"),
                    }, true, false, System.Collections.Generic.Comparer<(int ParentId, int ChildId)>.Default),
                });
        }

#endif
    }
}