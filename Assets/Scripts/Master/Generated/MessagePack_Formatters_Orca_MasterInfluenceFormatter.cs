// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Orca
{
    public sealed class MasterInfluenceFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Orca.MasterInfluence>
    {
        // InfluenceId
        private static global::System.ReadOnlySpan<byte> GetSpan_InfluenceId() => new byte[1 + 11] { 171, 73, 110, 102, 108, 117, 101, 110, 99, 101, 73, 100 };
        // InfluenceType
        private static global::System.ReadOnlySpan<byte> GetSpan_InfluenceType() => new byte[1 + 13] { 173, 73, 110, 102, 108, 117, 101, 110, 99, 101, 84, 121, 112, 101 };
        // BaseValue
        private static global::System.ReadOnlySpan<byte> GetSpan_BaseValue() => new byte[1 + 9] { 169, 66, 97, 115, 101, 86, 97, 108, 117, 101 };
        // PropotionalValue
        private static global::System.ReadOnlySpan<byte> GetSpan_PropotionalValue() => new byte[1 + 16] { 176, 80, 114, 111, 112, 111, 116, 105, 111, 110, 97, 108, 86, 97, 108, 117, 101 };
        // Duration
        private static global::System.ReadOnlySpan<byte> GetSpan_Duration() => new byte[1 + 8] { 168, 68, 117, 114, 97, 116, 105, 111, 110 };
        // CheckSide
        private static global::System.ReadOnlySpan<byte> GetSpan_CheckSide() => new byte[1 + 9] { 169, 67, 104, 101, 99, 107, 83, 105, 100, 101 };
        // CheckRange
        private static global::System.ReadOnlySpan<byte> GetSpan_CheckRange() => new byte[1 + 10] { 170, 67, 104, 101, 99, 107, 82, 97, 110, 103, 101 };
        // CheckType
        private static global::System.ReadOnlySpan<byte> GetSpan_CheckType() => new byte[1 + 9] { 169, 67, 104, 101, 99, 107, 84, 121, 112, 101 };
        // CheckValueMin
        private static global::System.ReadOnlySpan<byte> GetSpan_CheckValueMin() => new byte[1 + 13] { 173, 67, 104, 101, 99, 107, 86, 97, 108, 117, 101, 77, 105, 110 };
        // CheckValueMax
        private static global::System.ReadOnlySpan<byte> GetSpan_CheckValueMax() => new byte[1 + 13] { 173, 67, 104, 101, 99, 107, 86, 97, 108, 117, 101, 77, 97, 120 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Orca.MasterInfluence value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(GetSpan_InfluenceId());
            writer.Write(value.InfluenceId);
            writer.WriteRaw(GetSpan_InfluenceType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.InfluenceType>(formatterResolver).Serialize(ref writer, value.InfluenceType, options);
            writer.WriteRaw(GetSpan_BaseValue());
            writer.Write(value.BaseValue);
            writer.WriteRaw(GetSpan_PropotionalValue());
            writer.Write(value.PropotionalValue);
            writer.WriteRaw(GetSpan_Duration());
            writer.Write(value.Duration);
            writer.WriteRaw(GetSpan_CheckSide());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CheckSide>(formatterResolver).Serialize(ref writer, value.CheckSide, options);
            writer.WriteRaw(GetSpan_CheckRange());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CheckRange>(formatterResolver).Serialize(ref writer, value.CheckRange, options);
            writer.WriteRaw(GetSpan_CheckType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CheckType>(formatterResolver).Serialize(ref writer, value.CheckType, options);
            writer.WriteRaw(GetSpan_CheckValueMin());
            writer.Write(value.CheckValueMin);
            writer.WriteRaw(GetSpan_CheckValueMax());
            writer.Write(value.CheckValueMax);
        }

        public global::Orca.MasterInfluence Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __InfluenceId__ = default(int);
            var __InfluenceType__ = default(global::Orca.InfluenceType);
            var __BaseValue__ = default(int);
            var __PropotionalValue__ = default(int);
            var __Duration__ = default(int);
            var __CheckSide__ = default(global::Orca.CheckSide);
            var __CheckRange__ = default(global::Orca.CheckRange);
            var __CheckType__ = default(global::Orca.CheckType);
            var __CheckValueMin__ = default(int);
            var __CheckValueMax__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_InfluenceId().Slice(1))) { goto FAIL; }

                        __InfluenceId__ = reader.ReadInt32();
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7164775612197269065UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435678696549UL) { goto FAIL; }

                                __InfluenceType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.InfluenceType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7809618248066230339UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 474213082485UL:
                                        __CheckValueMin__ = reader.ReadInt32();
                                        continue;
                                    case 517028537717UL:
                                        __CheckValueMax__ = reader.ReadInt32();
                                        continue;
                                }

                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8461244823619461442UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                __BaseValue__ = reader.ReadInt32();
                                continue;

                            case 7235405997041608771UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                __CheckSide__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CheckSide>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8104601824635742275UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                __CheckType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CheckType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PropotionalValue().Slice(1))) { goto FAIL; }

                        __PropotionalValue__ = reader.ReadInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7957695015158969668UL) { goto FAIL; }

                        __Duration__ = reader.ReadInt32();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CheckRange().Slice(1))) { goto FAIL; }

                        __CheckRange__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CheckRange>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Orca.MasterInfluence(__InfluenceId__, __InfluenceType__, __BaseValue__, __PropotionalValue__, __Duration__, __CheckSide__, __CheckRange__, __CheckType__, __CheckValueMin__, __CheckValueMax__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
