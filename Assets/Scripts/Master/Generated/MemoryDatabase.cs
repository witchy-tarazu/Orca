// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using Orca;
using System.Collections.Generic;
using System.Collections;
using System;
using UnityEngine;
using Orca.Tables;

namespace Orca
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public MasterCardTable MasterCardTable { get; private set; }
        public MasterCardDetailTable MasterCardDetailTable { get; private set; }
        public MasterChildInfluenceTable MasterChildInfluenceTable { get; private set; }
        public MasterInfluenceTable MasterInfluenceTable { get; private set; }
        public MasterProjectileTable MasterProjectileTable { get; private set; }

        public MemoryDatabase(
            MasterCardTable MasterCardTable,
            MasterCardDetailTable MasterCardDetailTable,
            MasterChildInfluenceTable MasterChildInfluenceTable,
            MasterInfluenceTable MasterInfluenceTable,
            MasterProjectileTable MasterProjectileTable
        )
        {
            this.MasterCardTable = MasterCardTable;
            this.MasterCardDetailTable = MasterCardDetailTable;
            this.MasterChildInfluenceTable = MasterChildInfluenceTable;
            this.MasterInfluenceTable = MasterInfluenceTable;
            this.MasterProjectileTable = MasterProjectileTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.MasterCardTable = ExtractTableData<MasterCard, MasterCardTable>(header, databaseBinary, options, xs => new MasterCardTable(xs));
            this.MasterCardDetailTable = ExtractTableData<MasterCardDetail, MasterCardDetailTable>(header, databaseBinary, options, xs => new MasterCardDetailTable(xs));
            this.MasterChildInfluenceTable = ExtractTableData<MasterChildInfluence, MasterChildInfluenceTable>(header, databaseBinary, options, xs => new MasterChildInfluenceTable(xs));
            this.MasterInfluenceTable = ExtractTableData<MasterInfluence, MasterInfluenceTable>(header, databaseBinary, options, xs => new MasterInfluenceTable(xs));
            this.MasterProjectileTable = ExtractTableData<MasterProjectile, MasterProjectileTable>(header, databaseBinary, options, xs => new MasterProjectileTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.MasterCardTable = ExtractTableData<MasterCard, MasterCardTable>(header, databaseBinary, options, xs => new MasterCardTable(xs)),
                () => this.MasterCardDetailTable = ExtractTableData<MasterCardDetail, MasterCardDetailTable>(header, databaseBinary, options, xs => new MasterCardDetailTable(xs)),
                () => this.MasterChildInfluenceTable = ExtractTableData<MasterChildInfluence, MasterChildInfluenceTable>(header, databaseBinary, options, xs => new MasterChildInfluenceTable(xs)),
                () => this.MasterInfluenceTable = ExtractTableData<MasterInfluence, MasterInfluenceTable>(header, databaseBinary, options, xs => new MasterInfluenceTable(xs)),
                () => this.MasterProjectileTable = ExtractTableData<MasterProjectile, MasterProjectileTable>(header, databaseBinary, options, xs => new MasterProjectileTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.MasterCardTable.GetRawDataUnsafe());
            builder.Append(this.MasterCardDetailTable.GetRawDataUnsafe());
            builder.Append(this.MasterChildInfluenceTable.GetRawDataUnsafe());
            builder.Append(this.MasterInfluenceTable.GetRawDataUnsafe());
            builder.Append(this.MasterProjectileTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.MasterCardTable.GetRawDataUnsafe());
            builder.Append(this.MasterCardDetailTable.GetRawDataUnsafe());
            builder.Append(this.MasterChildInfluenceTable.GetRawDataUnsafe());
            builder.Append(this.MasterInfluenceTable.GetRawDataUnsafe());
            builder.Append(this.MasterProjectileTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                MasterCardTable,
                MasterCardDetailTable,
                MasterChildInfluenceTable,
                MasterInfluenceTable,
                MasterProjectileTable,
            });

            ((ITableUniqueValidate)MasterCardTable).ValidateUnique(result);
            ValidateTable(MasterCardTable.All, database, "CardId", MasterCardTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MasterCardDetailTable).ValidateUnique(result);
            ValidateTable(MasterCardDetailTable.All, database, "(CardId, DetailId)", MasterCardDetailTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MasterChildInfluenceTable).ValidateUnique(result);
            ValidateTable(MasterChildInfluenceTable.All, database, "ChildId", MasterChildInfluenceTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MasterInfluenceTable).ValidateUnique(result);
            ValidateTable(MasterInfluenceTable.All, database, "InfluenceId", MasterInfluenceTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MasterProjectileTable).ValidateUnique(result);
            ValidateTable(MasterProjectileTable.All, database, "ProjectileId", MasterProjectileTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "card":
                    return db.MasterCardTable;
                case "card_detail":
                    return db.MasterCardDetailTable;
                case "child_influence":
                    return db.MasterChildInfluenceTable;
                case "influence":
                    return db.MasterInfluenceTable;
                case "projectile":
                    return db.MasterProjectileTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("card", Orca.Tables.MasterCardTable.CreateMetaTable());
            dict.Add("card_detail", Orca.Tables.MasterCardDetailTable.CreateMetaTable());
            dict.Add("child_influence", Orca.Tables.MasterChildInfluenceTable.CreateMetaTable());
            dict.Add("influence", Orca.Tables.MasterInfluenceTable.CreateMetaTable());
            dict.Add("projectile", Orca.Tables.MasterProjectileTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}