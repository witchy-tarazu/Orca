// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Orca
{
    public sealed class MasterProjectileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Orca.MasterProjectile>
    {
        // ProjectileId
        private static global::System.ReadOnlySpan<byte> GetSpan_ProjectileId() => new byte[1 + 12] { 172, 80, 114, 111, 106, 101, 99, 116, 105, 108, 101, 73, 100 };
        // ProjectileType
        private static global::System.ReadOnlySpan<byte> GetSpan_ProjectileType() => new byte[1 + 14] { 174, 80, 114, 111, 106, 101, 99, 116, 105, 108, 101, 84, 121, 112, 101 };
        // StartType
        private static global::System.ReadOnlySpan<byte> GetSpan_StartType() => new byte[1 + 9] { 169, 83, 116, 97, 114, 116, 84, 121, 112, 101 };
        // Speed
        private static global::System.ReadOnlySpan<byte> GetSpan_Speed() => new byte[1 + 5] { 165, 83, 112, 101, 101, 100 };
        // Distance
        private static global::System.ReadOnlySpan<byte> GetSpan_Distance() => new byte[1 + 8] { 168, 68, 105, 115, 116, 97, 110, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Orca.MasterProjectile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_ProjectileId());
            writer.Write(value.ProjectileId);
            writer.WriteRaw(GetSpan_ProjectileType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.ProjectileType>(formatterResolver).Serialize(ref writer, value.ProjectileType, options);
            writer.WriteRaw(GetSpan_StartType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.ProjetileStartType>(formatterResolver).Serialize(ref writer, value.StartType, options);
            writer.WriteRaw(GetSpan_Speed());
            writer.Write(value.Speed);
            writer.WriteRaw(GetSpan_Distance());
            writer.Write(value.Distance);
        }

        public global::Orca.MasterProjectile Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Orca.MasterProjectile();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProjectileId().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ProjectileType().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StartType().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 431197876307UL) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7305804385369680196UL) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
