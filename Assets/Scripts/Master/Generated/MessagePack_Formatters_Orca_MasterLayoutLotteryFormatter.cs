// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Orca
{
    public sealed class MasterLayoutLotteryFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Orca.MasterLayoutLottery>
    {
        // StageId
        private static global::System.ReadOnlySpan<byte> GetSpan_StageId() => new byte[1 + 7] { 167, 83, 116, 97, 103, 101, 73, 100 };
        // LayoutId
        private static global::System.ReadOnlySpan<byte> GetSpan_LayoutId() => new byte[1 + 8] { 168, 76, 97, 121, 111, 117, 116, 73, 100 };
        // Weight
        private static global::System.ReadOnlySpan<byte> GetSpan_Weight() => new byte[1 + 6] { 166, 87, 101, 105, 103, 104, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Orca.MasterLayoutLottery value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_StageId());
            writer.Write(value.StageId);
            writer.WriteRaw(GetSpan_LayoutId());
            writer.Write(value.LayoutId);
            writer.WriteRaw(GetSpan_Weight());
            writer.Write(value.Weight);
        }

        public global::Orca.MasterLayoutLottery Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __StageId__ = default(int);
            var __LayoutId__ = default(int);
            var __Weight__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228197546030163UL) { goto FAIL; }

                        __StageId__ = reader.ReadInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7226435124822892876UL) { goto FAIL; }

                        __LayoutId__ = reader.ReadInt32();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 127991760381271UL) { goto FAIL; }

                        __Weight__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::Orca.MasterLayoutLottery(__StageId__, __LayoutId__, __Weight__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
