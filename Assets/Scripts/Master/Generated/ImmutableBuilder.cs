// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using Orca;
using System.Collections.Generic;
using System.Collections;
using System;
using UnityEngine;
using Orca.Tables;

namespace Orca
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<MasterCard> data)
        {
            var newData = CloneAndSortBy(data, x => x.CardId, System.Collections.Generic.Comparer<int>.Default);
            var table = new MasterCardTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.MasterCardDetailTable,
                memory.MasterInfluenceTable,
                memory.MasterInfluenceRelationTable
            
            );
        }

        public void RemoveMasterCard(int[] keys)
        {
            var data = RemoveCore(memory.MasterCardTable.GetRawDataUnsafe(), keys, x => x.CardId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.CardId, System.Collections.Generic.Comparer<int>.Default);
            var table = new MasterCardTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.MasterCardDetailTable,
                memory.MasterInfluenceTable,
                memory.MasterInfluenceRelationTable
            
            );
        }

        public void Diff(MasterCard[] addOrReplaceData)
        {
            var data = DiffCore(memory.MasterCardTable.GetRawDataUnsafe(), addOrReplaceData, x => x.CardId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.CardId, System.Collections.Generic.Comparer<int>.Default);
            var table = new MasterCardTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.MasterCardDetailTable,
                memory.MasterInfluenceTable,
                memory.MasterInfluenceRelationTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<MasterCardDetail> data)
        {
            var newData = CloneAndSortBy(data, x => (x.CardId, x.InfluenceId), System.Collections.Generic.Comparer<(int CardId, int InfluenceId)>.Default);
            var table = new MasterCardDetailTable(newData);
            memory = new MemoryDatabase(
                memory.MasterCardTable,
                table,
                memory.MasterInfluenceTable,
                memory.MasterInfluenceRelationTable
            
            );
        }


        public void ReplaceAll(System.Collections.Generic.IList<MasterInfluence> data)
        {
            var newData = CloneAndSortBy(data, x => x.InfluenceId, System.Collections.Generic.Comparer<int>.Default);
            var table = new MasterInfluenceTable(newData);
            memory = new MemoryDatabase(
                memory.MasterCardTable,
                memory.MasterCardDetailTable,
                table,
                memory.MasterInfluenceRelationTable
            
            );
        }

        public void RemoveMasterInfluence(int[] keys)
        {
            var data = RemoveCore(memory.MasterInfluenceTable.GetRawDataUnsafe(), keys, x => x.InfluenceId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.InfluenceId, System.Collections.Generic.Comparer<int>.Default);
            var table = new MasterInfluenceTable(newData);
            memory = new MemoryDatabase(
                memory.MasterCardTable,
                memory.MasterCardDetailTable,
                table,
                memory.MasterInfluenceRelationTable
            
            );
        }

        public void Diff(MasterInfluence[] addOrReplaceData)
        {
            var data = DiffCore(memory.MasterInfluenceTable.GetRawDataUnsafe(), addOrReplaceData, x => x.InfluenceId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.InfluenceId, System.Collections.Generic.Comparer<int>.Default);
            var table = new MasterInfluenceTable(newData);
            memory = new MemoryDatabase(
                memory.MasterCardTable,
                memory.MasterCardDetailTable,
                table,
                memory.MasterInfluenceRelationTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<MasterInfluenceRelation> data)
        {
            var newData = CloneAndSortBy(data, x => (x.ParentId, x.ChildId), System.Collections.Generic.Comparer<(int ParentId, int ChildId)>.Default);
            var table = new MasterInfluenceRelationTable(newData);
            memory = new MemoryDatabase(
                memory.MasterCardTable,
                memory.MasterCardDetailTable,
                memory.MasterInfluenceTable,
                table
            
            );
        }


    }
}