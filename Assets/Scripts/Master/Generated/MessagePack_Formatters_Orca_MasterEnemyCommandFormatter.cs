// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Orca
{
    public sealed class MasterEnemyCommandFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Orca.MasterEnemyCommand>
    {
        // PatternId
        private static global::System.ReadOnlySpan<byte> GetSpan_PatternId() => new byte[1 + 9] { 169, 80, 97, 116, 116, 101, 114, 110, 73, 100 };
        // Index
        private static global::System.ReadOnlySpan<byte> GetSpan_Index() => new byte[1 + 5] { 165, 73, 110, 100, 101, 120 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // TargetType
        private static global::System.ReadOnlySpan<byte> GetSpan_TargetType() => new byte[1 + 10] { 170, 84, 97, 114, 103, 101, 116, 84, 121, 112, 101 };
        // Value
        private static global::System.ReadOnlySpan<byte> GetSpan_Value() => new byte[1 + 5] { 165, 86, 97, 108, 117, 101 };
        // Wait
        private static global::System.ReadOnlySpan<byte> GetSpan_Wait() => new byte[1 + 4] { 164, 87, 97, 105, 116 };
        // IsOnce
        private static global::System.ReadOnlySpan<byte> GetSpan_IsOnce() => new byte[1 + 6] { 166, 73, 115, 79, 110, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Orca.MasterEnemyCommand value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_PatternId());
            writer.Write(value.PatternId);
            writer.WriteRaw(GetSpan_Index());
            writer.Write(value.Index);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CommandType>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_TargetType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CommandTargetType>(formatterResolver).Serialize(ref writer, value.TargetType, options);
            writer.WriteRaw(GetSpan_Value());
            writer.Write(value.Value);
            writer.WriteRaw(GetSpan_Wait());
            writer.Write(value.Wait);
            writer.WriteRaw(GetSpan_IsOnce());
            writer.Write(value.IsOnce);
        }

        public global::Orca.MasterEnemyCommand Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __PatternId__ = default(int);
            var __Index__ = default(int);
            var __Type__ = default(global::Orca.CommandType);
            var __TargetType__ = default(global::Orca.CommandTargetType);
            var __Value__ = default(int);
            var __Wait__ = default(int);
            var __IsOnce__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_PatternId().Slice(1))) { goto FAIL; }

                        __PatternId__ = reader.ReadInt32();
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 517097156169UL:
                                __Index__ = reader.ReadInt32();
                                continue;
                            case 435761733974UL:
                                __Value__ = reader.ReadInt32();
                                continue;
                        }
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869908UL:
                                __Type__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CommandType>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953063255UL:
                                __Wait__ = reader.ReadInt32();
                                continue;
                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_TargetType().Slice(1))) { goto FAIL; }

                        __TargetType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Orca.CommandTargetType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 111477726868297UL) { goto FAIL; }

                        __IsOnce__ = reader.ReadBoolean();
                        continue;

                }
            }

            var ____result = new global::Orca.MasterEnemyCommand(__PatternId__, __Index__, __Type__, __TargetType__, __Value__, __Wait__, __IsOnce__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
